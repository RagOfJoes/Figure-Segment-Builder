{"version":3,"sources":["Rule/String.js","Rule/Select.js","Rule/index.js","Segment.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","textDivider","paddingBottom","paddingTop","spacing","values","onChange","conditionSelection","classes","Grid","item","Typography","className","FormControl","InputLabel","id","Select","labelId","value","target","map","v","MenuItem","key","TextField","label","margin","maxWidth","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","useState","handleValue","multiple","e","input","Input","renderValue","selected","join","name","Checkbox","checked","indexOf","ListItemText","primary","config","Name","type","Source","container","index","onOr","onDelete","showOrButton","keySelection","toggleKey","toggleCondition","wrap","direction","alignItems","justify","variant","Object","keys","k","Button","onClick","color","startIcon","zIndex","boxShadow","shadows","borderRadius","shape","backgroundColor","palette","background","default","padding","ruleContainer","marginTop","isEditingTitle","toggleEditingTitle","segmentTitle","changeSegmentTitle","uniqueId","rules","changeRules","handleDelete","newRules","length","filter","i","autoFocus","onBlur","setTimeout","rule","Rule","concat","Divider","divider","opacity","height","marginLeft","main","addButton","Boolean","window","location","hostname","match","ReactDOM","render","segments","changeSegments","segment","Fragment","orientation","Segment","newSegments","size","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b494145.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nconst useStyles = makeStyles(theme => ({\n\tformControl: {\n\t\tminWidth: 120\n\t},\n\ttextDivider: {\n\t\tpaddingBottom: 0,\n\t\tpaddingTop: theme.spacing(2)\n\t}\n}));\n\nconst values = ['contain', 'not contain', 'extacly match', 'not exactly match'];\n\nexport default ({ onChange, conditionSelection }) => {\n\tconst classes = useStyles();\n\treturn (\n\t\t<>\n\t\t\t<Grid item>\n\t\t\t\t<Typography className={classes['textDivider']}>should</Typography>\n\t\t\t</Grid>\n\n\t\t\t<Grid item>\n\t\t\t\t<FormControl className={classes['formControl']}>\n\t\t\t\t\t<InputLabel id=\"condition\">Condition</InputLabel>\n\t\t\t\t\t<Select labelId=\"condition\" value={conditionSelection} onChange={({ target: { value } }) => onChange(value)}>\n\t\t\t\t\t\t{values.map(v => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<MenuItem key={v} value={v}>\n\t\t\t\t\t\t\t\t\t{v}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\t\t\t</Grid>\n\n\t\t\t<Grid item>\n\t\t\t\t<TextField label=\"Keyword\" />\n\t\t\t</Grid>\n\t\t</>\n\t);\n};\n","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nconst useStyles = makeStyles(theme => ({\n\tformControl: {\n\t\tmargin: theme.spacing(1),\n\t\tminWidth: 120,\n\t\tmaxWidth: 300\n\t},\n\ttextDivider: {\n\t\tpaddingBottom: 0,\n\t\tpaddingTop: theme.spacing(2)\n\t}\n}));\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n\tPaperProps: {\n\t\tstyle: {\n\t\t\tmaxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n\t\t\twidth: 250\n\t\t}\n\t}\n};\n\nexport default ({ values }) => {\n\tconst classes = useStyles();\n\tconst [value, handleValue] = useState([]);\n\n\tconst handleChange = event => {\n\t\thandleValue(event.target.value);\n\t};\n\treturn (\n\t\t<>\n\t\t\t<Grid item>\n\t\t\t\t<Typography className={classes['textDivider']}>should have values</Typography>\n\t\t\t</Grid>\n\n\t\t\t<Grid item>\n\t\t\t\t<FormControl className={classes['formControl']}>\n\t\t\t\t\t<InputLabel id=\"demo-mutiple-chip-label\">Values</InputLabel>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tmultiple\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tid=\"demo-mutiple-chip\"\n\t\t\t\t\t\tMenuProps={MenuProps}\n\t\t\t\t\t\tlabelId=\"demo-mutiple-chip-label\"\n\t\t\t\t\t\tonChange={e => handleChange(e)}\n\t\t\t\t\t\tinput={<Input id=\"select-multiple-chip\" />}\n\t\t\t\t\t\trenderValue={selected => selected.join(', ')}\n\t\t\t\t\t>\n\t\t\t\t\t\t{values.map(name => (\n\t\t\t\t\t\t\t<MenuItem key={name} value={name}>\n\t\t\t\t\t\t\t\t<Checkbox checked={value.indexOf(name) > -1} />\n\t\t\t\t\t\t\t\t<ListItemText primary={name} />\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\t\t\t</Grid>\n\t\t</>\n\t);\n};\n","import String from './String';\nimport CustomSelect from './Select';\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\n/**\n * TODO:\n * Create And Segments\n * Create Or Segments\n * Create structure for Options for Dropdowns\n */\nconst config = {\n\tName: {\n\t\ttype: 'string'\n\t},\n\tSource: {\n\t\ttype: 'multi_select',\n\t\tvalues: ['Web', 'Email', 'Phone', 'Other']\n\t},\n\t'Date subscribed': {\n\t\ttype: 'date'\n\t}\n};\n\nconst useStyles = makeStyles(theme => ({\n\tcontainer: {\n\t\tpaddingTop: 0\n\t},\n\tformControl: {\n\t\tminWidth: 120\n\t},\n\ttextDivider: {\n\t\tpaddingBottom: 0,\n\t\tpaddingTop: theme.spacing(2)\n\t}\n}));\n\nexport default ({ index, onOr, onDelete, showOrButton }) => {\n\tconst classes = useStyles();\n\tconst [keySelection, toggleKey] = useState('');\n\tconst [conditionSelection, toggleCondition] = useState('');\n\treturn (\n\t\t<Grid\n\t\t\titem\n\t\t\tcontainer\n\t\t\twrap=\"nowrap\"\n\t\t\tdirection=\"row\"\n\t\t\talignItems=\"center\"\n\t\t\tjustify=\"space-between\"\n\t\t\tclassName={classes['container']}\n\t\t>\n\t\t\t<Grid item container spacing={3} direction=\"row\" alignItems=\"center\">\n\t\t\t\t<Grid item>\n\t\t\t\t\t<FormControl className={classes['formControl']}>\n\t\t\t\t\t\t<InputLabel id=\"key\">Rule #{index}</InputLabel>\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tlabelId=\"key\"\n\t\t\t\t\t\t\tvalue={keySelection}\n\t\t\t\t\t\t\tMenuProps={{ variant: 'menu' }}\n\t\t\t\t\t\t\tonChange={({ target: { value } }) => toggleKey(value)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{Object.keys(config).map(k => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={k} value={k}>\n\t\t\t\t\t\t\t\t\t\t{k}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</Grid>\n\t\t\t\t{keySelection && config[keySelection].type === 'string' && (\n\t\t\t\t\t<String onChange={value => toggleCondition(value)} conditionSelection={conditionSelection} />\n\t\t\t\t)}\n\n\t\t\t\t{keySelection && config[keySelection].type === 'multi_select' && (\n\t\t\t\t\t<CustomSelect values={config[keySelection].values} />\n\t\t\t\t)}\n\t\t\t</Grid>\n\n\t\t\t<Grid item container spacing={1} direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\n\t\t\t\t{showOrButton && (\n\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t<Button variant=\"text\" onClick={onOr}>\n\t\t\t\t\t\t\tor\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t)}\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => onDelete(index)}>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n","import Rule from './Rule';\nimport uniqueId from 'lodash/uniqueId';\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nconst useStyles = makeStyles(theme => ({\n\tcontainer: {\n\t\tzIndex: 1,\n\t\tboxShadow: theme.shadows[2],\n\t\tborderRadius: theme.shape.borderRadius,\n\t\tbackgroundColor: theme.palette.background.default,\n\t\tpadding: `${theme.spacing(2)}px ${theme.spacing(3)}px`\n\t\t// marginTop: ({ index }) => index > 0 && theme.spacing(6)\n\t},\n\truleContainer: {\n\t\tmarginTop: theme.spacing(2)\n\t}\n}));\n\nexport default ({ index, onDelete }) => {\n\tconst classes = useStyles({ index });\n\tconst [isEditingTitle, toggleEditingTitle] = useState(false);\n\tconst [segmentTitle, changeSegmentTitle] = useState('Segment Title');\n\tconst [rules, changeRules] = useState(() => [uniqueId(segmentTitle + '-rule-')]);\n\n\tconst handleDelete = index => {\n\t\tconst newRules = rules;\n\t\tconst indexOf = newRules.indexOf(index);\n\n\t\tif (indexOf === -1) return;\n\n\t\tif (rules.length === 1) {\n\t\t\tonDelete();\n\t\t\treturn;\n\t\t}\n\n\t\treturn changeRules(newRules.filter((v, i) => i !== indexOf));\n\t};\n\n\treturn (\n\t\t<Grid container direction=\"column\" className={classes['container']}>\n\t\t\t<Grid item>\n\t\t\t\t{isEditingTitle ? (\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tlabel=\"Title\"\n\t\t\t\t\t\tvalue={segmentTitle}\n\t\t\t\t\t\tonChange={({ target: { value } }) => changeSegmentTitle(value)}\n\t\t\t\t\t\tonBlur={() => {\n\t\t\t\t\t\t\tif (segmentTitle.length === 0) changeSegmentTitle('Segment Title');\n\t\t\t\t\t\t\tsetTimeout(() => toggleEditingTitle(false), 250);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<Typography onClick={() => toggleEditingTitle(true)} variant=\"body1\">\n\t\t\t\t\t\t{segmentTitle}\n\t\t\t\t\t</Typography>\n\t\t\t\t)}\n\t\t\t</Grid>\n\t\t\t{rules.map((rule, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Grid\n\t\t\t\t\t\tkey={rule}\n\t\t\t\t\t\titem\n\t\t\t\t\t\tcontainer\n\t\t\t\t\t\tspacing={4}\n\t\t\t\t\t\tdirection=\"column\"\n\t\t\t\t\t\tjustify=\"space-between\"\n\t\t\t\t\t\tclassName={classes['ruleContainer']}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Rule\n\t\t\t\t\t\t\tindex={i + 1}\n\t\t\t\t\t\t\tonDelete={() => handleDelete(rule)}\n\t\t\t\t\t\t\tshowOrButton={i === rules.length - 1}\n\t\t\t\t\t\t\tonOr={() => {\n\t\t\t\t\t\t\t\tchangeRules(rules.concat([uniqueId(segmentTitle + '-rule-')]));\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{rules.length > 1 && i !== rules.length - 1 && (\n\t\t\t\t\t\t\t<Grid item>\n\t\t\t\t\t\t\t\t<Divider variant=\"fullWidth\" />\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Grid>\n\t\t\t\t);\n\t\t\t})}\n\t\t</Grid>\n\t);\n};\n","import './App.scss';\nimport Segment from './Segment';\nimport uniqueId from 'lodash/uniqueId';\nimport React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nconst useStyles = makeStyles(theme => ({\n\tdivider: {\n\t\twidth: 1.5,\n\t\topacity: 0.45,\n\t\theight: theme.spacing(8),\n\t\tmarginLeft: theme.spacing(2),\n\t\tbackgroundColor: theme.palette.primary.main\n\t},\n\taddButton: {\n\t\tmarginTop: theme.spacing(4)\n\t}\n}));\n\nexport default () => {\n\tconst classes = useStyles();\n\tconst [segments, changeSegments] = useState(() => [uniqueId('segment-')]);\n\n\tconst handleDelete = index => {\n\t\tconst newSegments = segments;\n\t\tconst indexOf = newSegments.indexOf(index);\n\n\t\tif (indexOf === -1) return;\n\n\t\tif (segments.length === 1) return;\n\n\t\treturn changeSegments(newSegments.filter((v, i) => i !== indexOf));\n\t};\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Grid container direction=\"column\">\n\t\t\t\t{segments.map((segment, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<React.Fragment key={segment}>\n\t\t\t\t\t\t\t{i > 0 && <Divider orientation=\"vertical\" className={classes['divider']} />}\n\t\t\t\t\t\t\t<Segment index={i} onDelete={() => handleDelete(segment)} />\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t);\n\t\t\t\t})}\n\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tsize=\"large\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tclassName={classes['addButton']}\n\t\t\t\t\t\tonClick={() => changeSegments(segments.concat([uniqueId('segment-')]))}\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</div>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}